name: build-image

on:
  release:
    types:
      - created

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      base_image: ${{ steps.base_image.outputs.value }}
      image_name: ${{ steps.image_name.outputs.value }}
    env:
      IMAGE_NAME: minecraft-command-bot
    steps:
      - id: base_image
        run: echo "::set-output name=value::ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
      - name: view output
        run: echo "steps.base_image.outputs.value = ${{ steps.base_image.outputs.value }}"

      - id: image_name
        run: echo "::set-output name=value::${{ env.IMAGE_NAME }}"
      - name: view output
        run: echo "steps.image_name.outputs.value = ${{ steps.image_name.outputs.value }}"
  run:
    runs-on: ubuntu-latest
    needs: info
    strategy:
      fail-fast: false
      matrix:
        target:
          - linux/amd64
          - linux/arm64
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - run: echo "target_arch=$(echo ${{ matrix.target }} | awk -F/ '{print $NF}')" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: ${{ matrix.target }}
          tags: |
            ${{ needs.info.outputs.base_image }}-${{ env.target_arch }}
  manifest:
    runs-on: ubuntu-latest
    needs:
      - run
      - info
    env:
      IMAGE_NAME: minecraft-command-bot
      TARGET_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: create manifest
        env:
          FORCE_COLOR: 3
        run: |
          npx zx <<'EOF'
          const target_image_name = "${{ needs.info.outputs.base_image }}"
          console.log(target_image_name)
          const resp = await fetch("https://ghcr.io/v2/${{ github.repository_owner }}/${{ needs.info.outputs.image_name }}/tags/list", { headers: { Authorization: `Bearer ${Buffer.from("${{ secrets.PERSONAL_ACCESS_TOKEN }}").toString('base64')}` } })
          const body = await resp.json()
          console.log(body)
          const images = body.tags.map(t => `ghcr.io/${{ github.repository_owner }}/${{ needs.info.outputs.image_name }}:${t}` )
          console.log(images)
          const target_images = images.filter(i => i.includes(target_image_name))
          console.log(target_images)
          await $`docker manifest create ${target_image_name} ${target_images}`
          await $`docker manifest push ${target_image_name}`
          EOF
