name: build-image

on:
  release:
    types:
      - created

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      base_image: ${{ steps.base_image.base_image }}
    env:
      IMAGE_NAME: minecraft-command-bot
    steps:
      - id: base_image
        run: echo "::set-output name=base_image::$(echo 'base_image=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}')"
  run:
    runs-on: ubuntu-latest
    needs: info
    strategy:
      fail-fast: false
      matrix:
        target:
          - linux/amd64
          - linux/arm64
    env:
      IMAGE_NAME: minecraft-command-bot
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - run: echo "target_arch=$(echo ${{ matrix.target }} | awk -F/ '{print $NF}'))" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: ${{ matrix.target }}
          tags: |
            ${{ needs.info.outputs.base_image }}-${{ env.target_arch }}
  manifest:
    runs-on: ubuntu-latest
    needs:
      - run
      - info
    env:
      IMAGE_NAME: minecraft-command-bot
      TARGET_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: create manifest
        env:
          FORCE_COLOR: 3
        run: |
          npx zx <<'EOF'
          const target_image_name = "${{ needs.info.outputs.base_image }}"
          const images = (await $`docker images --format '{{.Repository}}:{{.Tag}}'`).stdout.split("\n").slice(0, -1)
          const target_images = images.filter(i => i.includes(target_image_name))
          await $`docker manifest create ${target_image_name} ${target_images}`
          EOF
